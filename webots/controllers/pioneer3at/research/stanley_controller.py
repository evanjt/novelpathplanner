"""

Path tracking simulation with Stanley steering control and PID speed control.

author: Atsushi Sakai (@Atsushi_twi)

Ref:
    - [Stanley: The robot that won the DARPA grand challenge](http://isl.ecst.csuchico.edu/DOCS/darpa2005/DARPA%202005%20Stanley.pdf)
    - [Autonomous Automobile Path Tracking](https://www.ri.cmu.edu/pub_files/2009/2/Automatic_Steering_Methods_for_Autonomous_Automobile_Path_Tracking.pdf)

"""
import numpy as np
import matplotlib.pyplot as plt
import sys
from research import cubic_spline_planner

k = 0.5  # control gain
Kp = 1.0  # speed proportional gain
dt = 0.1  # [s] time difference
L = 2.9  # [m] Wheel base of vehicle
max_steer = np.radians(80.0)  # [rad] max steering angle

show_animation = True


class State(object):
    """
    Class representing the state of a vehicle.

    :param x: (float) x-coordinate
    :param y: (float) y-coordinate
    :param yaw: (float) yaw angle
    :param v: (float) speed
    """

    def __init__(self, x=0.0, y=0.0, yaw=0.0, v=0.0):
        """Instantiate the object."""
        super(State, self).__init__()
        self.x = x
        self.y = y
        self.yaw = yaw
        self.v = v

    def update(self, acceleration, delta):
        """
        Update the state of the vehicle.

        Stanley Control uses bicycle model.

        :param acceleration: (float) Acceleration
        :param delta: (float) Steering
        """
        delta = np.clip(delta, -max_steer, max_steer)

        self.x += self.v * np.cos(self.yaw) * dt
        self.y += self.v * np.sin(self.yaw) * dt
        self.yaw += self.v / L * np.tan(delta) * dt
        self.yaw = normalize_angle(self.yaw)
        self.v += acceleration * dt

    def update_pioneer(self, x, y, yaw, v):
        self.x = x
        self.y = y
        self.yaw = yaw
        self.v = v


def pid_control(target, current):
    """
    Proportional control for the speed.

    :param target: (float)
    :param current: (float)
    :return: (float)
    """
    return Kp * (target - current)


def stanley_control(state, cx, cy, cyaw, last_target_idx):
    """
    Stanley steering control.

    :param state: (State object)
    :param cx: ([float])
    :param cy: ([float])
    :param cyaw: ([float])
    :param last_target_idx: (int)
    :return: (float, int)
    """
    current_target_idx, error_front_axle = calc_target_index(state, cx, cy)

    if last_target_idx >= current_target_idx:
        current_target_idx = last_target_idx

    # theta_e corrects the heading error
    theta_e = normalize_angle(cyaw[current_target_idx] - state.yaw)
    # theta_d corrects the cross track error
    theta_d = np.arctan2(k * error_front_axle, state.v)
    # Steering control
    delta = theta_e + theta_d

    return delta, current_target_idx


def normalize_angle(angle):
    """
    Normalize an angle to [-pi, pi].

    :param angle: (float)
    :return: (float) Angle in radian in [-pi, pi]
    """
    while angle > np.pi:
        angle -= 2.0 * np.pi

    while angle < -np.pi:
        angle += 2.0 * np.pi

    return angle


def calc_target_index(state, cx, cy):
    """
    Compute index in the trajectory list of the target.

    :param state: (State object)
    :param cx: [float]
    :param cy: [float]
    :return: (int, float)
    """
    # Calc front axle position
    fx = state.x + L * np.cos(state.yaw)
    fy = state.y + L * np.sin(state.yaw)

    # Search nearest point index
    dx = [fx - icx for icx in cx]
    dy = [fy - icy for icy in cy]
    d = np.hypot(dx, dy)
    target_idx = np.argmin(d)

    # Project RMS error onto front axle vector
    front_axle_vec = [-np.cos(state.yaw + np.pi / 2),
                      -np.sin(state.yaw + np.pi / 2)]
    error_front_axle = np.dot([dx[target_idx], dy[target_idx]], front_axle_vec)

    return target_idx, error_front_axle


def main():
    """Plot an example of Stanley steering control on a cubic spline."""
    #  target course

    #ax = [0.0, 100.0, 100.0, 50.0, 120.0]
    #ay = [0.0, 0.0, -30.0, -20.0, 80.0]

    #ax = [-0.0, -0.328, -0.641, -0.935, -1.207, -1.458, -1.688, -1.898, -2.089, -2.263, -2.422, -2.567, -2.699, -2.819, -2.93, -3.032, -3.125, -3.211, -3.291, -3.366, -3.435, -3.499, -3.559, -3.616, -3.669, -3.718, -3.765, -3.81, -3.852, -3.892, -3.929, -3.965, -4.0, -4.032, -4.063, -4.093, -4.121, -4.148, -4.174, -4.199, -4.223, -4.245, -4.267, -4.288, -4.308, -4.328, -4.346, -4.364, -4.381, -4.397, -4.413, -4.428, -4.443, -4.457, -4.47, -4.483, -4.496, -4.508, -4.519, -4.53, -4.541, -4.551, -4.561, -4.57, -4.579, -4.588, -4.597, -4.605, -4.613, -4.62, -4.627, -4.634, -4.641, -4.648, -4.654, -4.66, -4.665, -4.671, -4.676, -4.681, -4.686, -4.691, -4.696, -4.7, -4.704, -4.708, -4.712, -4.716, -4.72, -4.723, -4.726, -4.73, -4.733, -4.736, -4.739, -4.741, -4.744, -4.747, -4.749, -4.752, -4.754, -4.756, -4.758, -4.76, -4.762, -4.764, -4.766, -4.768, -4.769, -4.771, -4.772, -4.774, -4.775, -4.777, -4.778, -4.779, -4.781, -4.782, -4.783, -4.784, -4.785, -4.786, -4.787, -4.788, -4.789, -4.79, -4.791, -4.792, -4.792, -4.793, -4.794, -4.794, -4.795, -4.796, -4.796, -4.797, -4.798, -4.798, -4.799, -4.799, -4.8, -4.8, -4.801, -4.801, -4.801, -4.802, -4.802, -4.803, -4.803, -4.803, -4.804, -4.804, -4.804, -4.805, -4.805, -4.805, -4.805, -4.806, -4.806, -4.806, -4.806, -4.807, -4.807, -4.807, -4.807, -4.807, -4.808, -4.808, -4.808, -4.808, -4.808, -4.808, -4.809, -4.809, -4.809, -4.809, -4.809, -4.809, -4.809, -4.809, -4.81, -4.81, -4.81, -4.81, -4.81, -4.81, -4.81, -4.81, -4.81, -4.81, -4.81, -4.81, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.811, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812, -4.812]

    #ay = [-0.001, -0.052, -0.146, -0.274, -0.428, -0.603, -0.794, -0.995, -1.204, -1.417, -1.632, -1.849, -2.064, -2.278, -2.489, -2.697, -2.901, -3.101, -3.297, -3.488, -3.675, -3.858, -4.035, -4.208, -4.376, -4.54, -4.7, -4.855, -5.005, -5.151, -5.294, -5.432, -5.566, -5.696, -5.823, -5.946, -6.065, -6.181, -6.293, -6.402, -6.508, -6.611, -6.711, -6.808, -6.902, -6.993, -7.081, -7.167, -7.251, -7.332, -7.41, -7.486, -7.56, -7.632, -7.702, -7.769, -7.835, -7.898, -7.96, -8.02, -8.078, -8.134, -8.189, -8.242, -8.294, -8.344, -8.392, -8.439, -8.485, -8.529, -8.572, -8.614, -8.654, -8.693, -8.731, -8.768, -8.804, -8.839, -8.873, -8.905, -8.937, -8.968, -8.998, -9.027, -9.055, -9.082, -9.109, -9.135, -9.159, -9.184, -9.207, -9.23, -9.252, -9.273, -9.294, -9.314, -9.334, -9.353, -9.371, -9.389, -9.406, -9.423, -9.44, -9.455, -9.471, -9.486, -9.5, -9.514, -9.528, -9.541, -9.554, -9.566, -9.578, -9.59, -9.601, -9.612, -9.623, -9.633, -9.643, -9.653, -9.662, -9.672, -9.68, -9.689, -9.697, -9.706, -9.713, -9.721, -9.728, -9.736, -9.743, -9.749, -9.756, -9.762, -9.769, -9.774, -9.78, -9.786, -9.791, -9.797, -9.802, -9.807, -9.812, -9.816, -9.821, -9.825, -9.83, -9.834, -9.838, -9.842, -9.846, -9.849, -9.853, -9.856, -9.86, -9.863, -9.866, -9.869, -9.872, -9.875, -9.878, -9.881, -9.883, -9.886, -9.888, -9.891, -9.893, -9.895, -9.897, -9.9, -9.902, -9.904, -9.906, -9.907, -9.909, -9.911, -9.913, -9.914, -9.916, -9.918, -9.919, -9.921, -9.922, -9.924, -9.925, -9.926, -9.927, -9.929, -9.93, -9.931, -9.932, -9.933, -9.934, -9.935, -9.936, -9.937, -9.938, -9.939, -9.94, -9.941, -9.942, -9.943, -9.943, -9.944, -9.945, -9.946, -9.946, -9.947, -9.948, -9.948, -9.949, -9.949, -9.95, -9.95, -9.951, -9.952, -9.952, -9.953, -9.953, -9.954, -9.954, -9.954, -9.955, -9.955, -9.956, -9.956, -9.956, -9.957, -9.957, -9.957, -9.958, -9.958, -9.958, -9.959, -9.959, -9.959, -9.96, -9.96, -9.96, -9.96, -9.961, -9.961, -9.961, -9.961, -9.962, -9.962, -9.962, -9.962, -9.962, -9.963, -9.963, -9.963, -9.963, -9.963, -9.963, -9.964, -9.964, -9.964, -9.964, -9.964, -9.964, -9.964, -9.965, -9.965, -9.965, -9.965, -9.965, -9.965, -9.965, -9.965, -9.965, -9.965, -9.966, -9.966, -9.966, -9.966, -9.966, -9.966, -9.966, -9.966, -9.966, -9.966, -9.966, -9.966, -9.966, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.967, -9.968, -9.968, -9.968, -9.968]

    ax = [-0.0001358790771223846, -0.32821375648637674, -0.6410043951043128, -0.9345674135134789, -1.2070349686069224, -1.457964855774059, -1.6878467804935529, -1.897741611499753, -2.0890270626814016, -2.263224271473269, -2.421883662337586, -2.566513038799199, -2.698535026670818, -2.8192644425717854, -2.9298988475966783, -3.0315175578410964, -3.125085851284707, -3.211462160675552, -3.291406781879451, -3.365591141548072, -3.4346070212699864, -3.498975375036273, -3.5591545371714064, -3.6155477233003563, -3.6685097946900918, -3.7183532984814147, -3.7653538212944455, -3.8097547072316655, -3.851771197383309, -3.8915940492642327, -3.929392693006772, -3.9653179778243146, -3.9995045580544835, -4.032072963514674, -4.063131394289413, -4.092777275621834, -4.121098604416923, -4.148175115041271, -4.174079288644839, -4.1988772271334405, -4.222629410170686, -4.245391351161545, -4.26721416603907, -4.288145066812472, -4.3082277902102915, -4.327502970339984, -4.346008463059694, -4.363779628696509, -4.38084957882745, -4.39724939204637, -4.413008302955578, -4.428153868030903, -4.442712111500447, -4.456707653939458, -4.470163825906882, -4.483102768624941, -4.495545523424215, -4.5075121114369345, -4.519021604815076, -4.530092190572672, -4.540741227999499, -4.550985300462446, -4.560840262298451, -4.570321281406243, -4.579442878061108, -4.588218960405539, -4.596662857007274, -4.604787346823517, -4.612604686864774, -4.620126637812764, -4.627364487813312, -4.63432907463625, -4.641030806369527, -4.647479680793309, -4.653685303561404, -4.65965690530147, -4.6654033577317255, -4.670933188880048, -4.6762545974811305, -4.6813754666185, -4.686303376670567, -4.691045617613227, -4.695609200725789, -4.7000008697420155, -4.7042271114837035, -4.7082941660104485, -4.712208036315946, -4.715974497598284, -4.719599106129146, -4.723087207744659, -4.726443945978619, -4.729674269857138, -4.732782941372241, -4.7357745426505575, -4.738653482832089, -4.741424004672945, -4.744090190884986, -4.746655970224461, -4.749125123340949, -4.751501288397213, -4.753787966469952, -4.75598852674086, -4.758106211486864, -4.760144140877952, -4.762105317590547, -4.763992631243979, -4.765808862667245, -4.767556688002872, -4.769238682654404, -4.77085732508371, -4.772415000464039, -4.773914004194487, -4.77535654528127, -4.776744749591, -4.778080662980903, -4.779366254310745, -4.780603418340994, -4.781793978521598, -4.782939689675567, -4.784042240581355, -4.785103256457925, -4.786124301356172, -4.787106880460291, -4.788052442302472, -4.788962380894236, -4.789838037777543, -4.790680703998726, -4.791491622008144, -4.79227198748838, -4.793022951113664, -4.79374562024312, -4.794441060550336, -4.79511029759164, -4.795754318315408, -4.796374072514613, -4.796970474224754, -4.797544403069216, -4.798096705554049, -4.798628196314056, -4.799139659312022, -4.7996318489928615, -4.800105491394351, -4.800561285216112, -4.800999902848382, -4.801421991362107, -4.801828173461798, -4.802219048402561, -4.802595192872627, -4.802957161842706, -4.8033054893833835, -4.8036406894517905, -4.803963256648669, -4.8042736669469726, -4.804572378393059, -4.804859831781505, -4.805136451304539, -4.80540264517704, -4.805658806238031, -4.80590531252954, -4.8061425278536785, -4.80637080230877, -4.8065904728053015, -4.8068018635624625, -4.807005286586001, -4.8072010421281, -4.807389419129947, -4.807570695647651, -4.807745139262128, -4.807913007473568, -4.8080745480810485, -4.808229999547867, -4.808379591353119, -4.808523544330049, -4.808662070991658, -4.808795375844065, -4.808923655688064, -4.809047099909335, -4.809165890757729, -4.80928020361604, -4.809390207258657, -4.809496064100482, -4.80959793043647, -4.8096959566721615, -4.809790287545524, -4.809881062340448, -4.809968415092205, -4.810052474785161, -4.8101333655430585, -4.810211206812121, -4.810286113537271, -4.810358196331707, -4.8104275616401, -4.8104943118956385, -4.810558545671162, -4.810620357824604, -4.810679839638956, -4.810737078956961, -4.810792160310731, -4.810845165046492, -4.810896171444614, -4.810945254835138, -4.810992487708943, -4.811037939824721, -4.811081678311933, -4.81112376776988, -4.811164270363045, -4.811203245912839, -4.811240751985902, -4.81127684397906, -4.811311575201101, -4.811344996951454, -4.811377158595914, -4.811408107639514, -4.811437889796643, -4.811466549058532, -4.811494127758192, -4.811520666632909, -4.811546204884379, -4.811570780236583, -4.81159442899148, -4.8116171860826, -4.811639085126616, -4.81166015847298, -4.811680437251679, -4.811699951419201, -4.81171872980276, -4.811736800142865, -4.811754189134272, -4.811770922465406, -4.8117870248562875, -4.811802520095035, -4.81181743107299, -4.8118317798185215, -4.811845587529549, -4.811858874604851, -4.81187166067418, -4.81188396462726, -4.81189580464167, -4.811907198209699, -4.811918162164169, -4.811928712703298, -4.811938865414623, -4.811948635298016, -4.811958036787839, -4.811967083774261, -4.811975789623774, -4.81198416719893, -4.811992228877341, -4.81199998656996, -4.812007451738671, -4.812014635413219, -4.812021548207502, -4.812028200335245, -4.812034601625087, -4.8120407615351, -4.812046689166757, -4.812052393278376, -4.812057882298055, -4.812063164336125, -4.812068247197128, -4.812073138391341, -4.812077845145878, -4.812082374415359, -4.812086732892186, -4.812090927016426, -4.812094962985328, -4.812098846762476, -4.812102584086598, -4.812106180480043, -4.81210964125694, -4.8121129715310484, -4.81211617622331, -4.812119260069123, -4.812122227625332, -4.812125083276966, -4.81212783124371, -4.8121304755861445, -4.81213302021174, -4.812135468880633, -4.812137825211178, -4.812140092685297, -4.812142274653618, -4.812144374340431, -4.8121463948484475, -4.812148339163387, -4.812150210158387, -4.812152010598246, -4.812153743143512, -4.812155410354412, -4.812157014694633, -4.8121585585349615, -4.812160044156791, -4.812161473755487, -4.812162849443634, -4.812164173254157, -4.812165447143322, -4.81216667299363, -4.8121678526165965, -4.812168987755428, -4.8121700800876, -4.81217113122733, -4.8121721427279684, -4.812173116084293, -4.812174052734713, -4.8121749540634, -4.812175821402328, -4.812176656033247, -4.812177459189573, -4.812178232058209, -4.812178975781306]
    ay = [-0.0013018326739358543, -0.052451032033161635, -0.14600953215675955, -0.27373328283139803, -0.42827757728967686, -0.6033386055001185, -0.7936439912993736, -0.9948656932695968, -1.2035003843999927, -1.4167432500312682, -1.6323688850207712, -1.8486255313919053, -2.0641446222549797, -2.2778653060572713, -2.4889725258580824, -2.696846813969631, -2.9010239194080794, -3.101162526996644, -3.297018545107733, -3.4884246750673524, -3.6752741992427507, -3.8575081234982895, -4.035104978914153, -4.208072728053354, -4.376442335482155, -4.540262654344165, -4.699596354260731, -4.854516674077961, -5.005104828955985, -5.151447937477087, -5.29363736287007, -5.43176738475154, -5.565934135283305, -5.696234747378723, -5.822766673378843, -5.945627141104289, -6.064912720873541, -6.180718982354977, -6.2931402242945635, -6.402269263471766, -6.508197271868763, -6.611013653137231, -6.7108059511256375, -6.807659784576561, -6.901658803186894, -6.9928846610981115, -7.081417004591606, -7.167333471338774, -7.2507096990235995, -7.331619341537746, -7.410134091261288, -7.486323706199288, -7.560256040956176, -7.631997080704499, -7.701610977449157, -7.769160088007938, -7.834705013228618, -7.898304638045542, -7.960016172047534, -8.019895190286372, -8.077995674103086, -8.1343700517894, -8.189069238935165, -8.242142678340723, -8.293638379396604, -8.343602956852628, -8.392081668914958, -8.439118454623413, -8.484755970472873, -8.529035626252218, -8.57199762008229, -8.613680972641026, -8.65412356056949, -8.693362149057103, -8.731432423608203, -8.768369020995166, -8.804205559405888, -8.838974667795496, -8.87270801445383, -8.905436334801578, -8.937189458428975, -8.967996335391796, -8.997885061779977, -9.026882904574625, -9.055016325809483, -9.082311006053072, -9.108791867227849, -9.134483094782661, -9.159408159234768, -9.183589837097509, -9.207050231209589, -9.229810790481695, -9.251892329075952, -9.273315045033439, -9.294098538364718, -9.314261828618058, -9.333823371939667, -9.352801077640022, -9.371212324279977, -9.389073975290088, -9.406402394136231, -9.423213459044257, -9.439522577296172, -9.455344699109926, -9.47069433111467, -9.48558554943296, -9.500032012381135, -9.514046972798772, -9.527643290017823, -9.540833441481785, -9.55362953402493, -9.566043314821382, -9.578086182013534, -9.58976919502906, -9.601103084595493, -9.612098262461114, -9.622764830830635, -9.633112591523934, -9.64315105486587, -9.652889448314944, -9.662336724838429, -9.671501571041272, -9.680392415055973, -9.68901743420035, -9.697384562409962, -9.705501497451747, -9.713375707925238, -9.721014440057548, -9.72842472429815, -9.735613381719274, -9.742587030227595, -9.74935209059275, -9.75591479229799, -9.76228117921821, -9.76845711513037, -9.774448289061237, -9.780260220477176, -9.785898264320668, -9.791367615897984, -9.79667331562242, -9.801820253617308, -9.806813174182919, -9.81165668013126, -9.816355236992626, -9.820913177097683, -9.82533470353874, -9.829623894013755, -9.833784704556518, -9.837820973156365, -9.84173642327067, -9.845534667233263, -9.849219209561857, -9.852793450167425, -9.856260687468444, -9.859624121412795, -9.86288685641004, -9.866051904176723, -9.869122186497256, -9.872100537902876, -9.8749897082711, -9.877792365348013, -9.88051109719568, -9.883148414566872, -9.885706753209279, -9.888188476101273, -9.890595875621248, -9.892931175652503, -9.895196533625581, -9.897394042499892, -9.899525732686438, -9.901593573913372, -9.903599477036076, -9.905545295793425, -9.907432828511794, -9.909263819758387, -9.911039961945367, -9.912762896886266, -9.914434217306065, -9.916055468306332, -9.917628148786749, -9.919153712824315, -9.920633571011484, -9.922069091754462, -9.923461602532827, -9.924812391121636, -9.92612270677713, -9.92739376138711, -9.928626730587034, -9.929822754842863, -9.930982940501632, -9.93210836081071, -9.93320005690667, -9.934259038774695, -9.935286286179359, -9.936282749567676, -9.937249350945205, -9.93818698472603, -9.939096518557395, -9.939978794119728, -9.940834627902815, -9.941664811958805, -9.942470114632755, -9.943251281271369, -9.944009034910595, -9.944744076942694, -9.945457087763403, -9.946148727399779, -9.9468196361193, -9.947470435020788, -9.948101726607677, -9.94871409534417, -9.9493081081948, -9.949884315147854, -9.950443249723184, -9.950985429464849, -9.951511356419028, -9.952021517597673, -9.952516385428304, -9.952996418190363, -9.95346206043854, -9.953913743413434, -9.954351885439966, -9.954776892313863, -9.955189157676603, -9.95558906337916, -9.955976979834857, -9.956353266361695, -9.956718271514436, -9.957072333406758, -9.957415780023785, -9.957748929525266, -9.958072090539698, -9.958385562449648, -9.95868963566854, -9.958984591909179, -9.959270704444227, -9.959548238358904, -9.959817450796116, -9.96007859119427, -9.960331901517957, -9.960577616481748, -9.960815963767287, -9.961047164233893, -9.961271432122864, -9.961488975255666, -9.961699995226185, -9.961904687587246, -9.962103242031526, -9.962295842567075, -9.962482667687572, -9.962663890537492, -9.962839679072326, -9.963010196214007, -9.96317560000169, -9.963336043738009, -9.963491676130962, -9.963642641431552, -9.9637890795673, -9.963931126271772, -9.964068913210212, -9.964202568101436, -9.964332214836059, -9.964457973591186, -9.964579960941675, -9.96469828996807, -9.964813070361284, -9.964924408524178, -9.96503240767007, -9.965137167918307, -9.965238786386983, -9.965337357282857, -9.965432971988605, -9.965525719147438, -9.9656156847452, -9.965702952190002, -9.965787602389462, -9.96586971382565, -9.965949362627777, -9.966026622642701, -9.966101565503337, -9.966174260695002, -9.966244775619785, -9.966313175658982, -9.966379524233659, -9.966443882863409, -9.966506311223341, -9.966566867199365, -9.96662560694182, -9.966682584917494, -9.96673785396009, -9.966791465319176, -9.966843468707667, -9.966893912347889, -9.966942843016259, -9.96699030608663, -9.967036345572335, -9.967081004166968, -9.967124323283945, -9.967166343094888, -9.967207102566844, -9.9672466394984, -9.967284990554711, -9.967322191301479, -9.967358276237913, -9.967393278828704, -9.967427231535035, -9.967460165844676, -9.967492112301157, -9.967523100532084, -9.967553159276596]
    #ax = [-0.0, -4.802, -4.812]
    #ay = [-0.001, -9.816, -9.968]

    #ax = [0,-4.812205523252487,3.1556544303894043,10.03111457824707,1.32009220123291,-1.9328665733337393]

    #ay= [0,-9.968538522720337,-2.9512504935264587,0.7637634575366975,7.399185657501221,3.1047082245349884]

    #print(len(ax), len(ay))
    cx, cy, cyaw, ck, s = cubic_spline_planner.calc_spline_course(ax, ay, ds=0.1)

    target_speed = 6.4 / 3.6  # [m/s]

    max_simulation_time = 200.0

    # Initial state
    state = State(x=0.0, y=0.0, yaw=np.radians(180.0), v=0.0)

    last_idx = len(cx) - 1
    time = 0.0
    x = [state.x]
    y = [state.y]
    yaw = [state.yaw]
    v = [state.v]
    t = [0.0]
    target_idx, _ = calc_target_index(state, cx, cy)

    while max_simulation_time >= time and last_idx > target_idx:
        ai = pid_control(target_speed, state.v)
        di, target_idx = stanley_control(state, cx, cy, cyaw, target_idx)
        #print(di)
        state.update(ai, di)
        time += dt
        #print(cx[target_idx], cy[target_idx])
        x.append(state.x)
        y.append(state.y)
        yaw.append(state.yaw)
        v.append(state.v)
        t.append(time)

        if show_animation:  # pragma: no cover
            plt.cla()
            # for stopping simulation with the esc key.
            plt.gcf().canvas.mpl_connect('key_release_event',
                    lambda event: [exit(0) if event.key == 'escape' else None])
            plt.plot(cx, cy, ".r", label="course")
            plt.plot(x, y, "-b", label="trajectory")
            plt.plot(cx[target_idx], cy[target_idx], "xg", label="target")
            plt.axis("equal")
            plt.grid(True)
            plt.title("Speed[km/h]:" + str(state.v * 3.6)[:4])
            plt.pause(0.001)

    # Test
    assert last_idx >= target_idx, "Cannot reach goal"

    if show_animation:  # pragma: no cover
        plt.plot(cx, cy, ".r", label="course")
        plt.plot(x, y, "-b", label="trajectory")
        plt.legend()
        plt.xlabel("x[m]")
        plt.ylabel("y[m]")
        plt.axis("equal")
        plt.grid(True)

        plt.subplots(1)
        plt.plot(t, [iv * 3.6 for iv in v], "-r")
        plt.xlabel("Time[s]")
        plt.ylabel("Speed[km/h]")
        plt.grid(True)
        plt.show()


if __name__ == '__main__':
    main()
